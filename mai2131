/*
 * Copyright © 2008-2014 Stéphane Raimbault <stephane.raimbault@gmail.com>
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <modbus.h>
#ifdef _WIN32
#include <winsock2.h>
#else
#include <sys/socket.h>
#endif
#include "my_easylogging.h"
using namespace std;

/* For MinGW */
#ifndef MSG_NOSIGNAL
#define MSG_NOSIGNAL 0
#endif

#include "unit-test.h"

enum
{
    TCP,
    TCP_PI,
    RTU
};

int main(int argc, char *argv[])
{
    easylogginginit(); //日志初始化

    int s = -1;
    modbus_t *ctx;
    modbus_mapping_t *mb_mapping;
    int rc;
    int i;
    int use_backend;
    uint8_t *query;
    int header_length;
    UINT16 *m_nb_registers;

    m_nb_registers = (UINT16 *)malloc(100 * sizeof(UINT16));
    memset(m_nb_registers, 0, 100 * sizeof(UINT16));
    if (argc > 1)
    {
        if (strcmp(argv[1], "tcp") == 0)
        {
            use_backend = TCP;
        }
        else if (strcmp(argv[1], "tcppi") == 0)
        {
            use_backend = TCP_PI;
        }
        else if (strcmp(argv[1], "rtu") == 0)
        {
            use_backend = RTU;
        }
        else
        {
            printf("Usage:\n  %s [tcp|tcppi|rtu] - Modbus server for unit testing\n\n", argv[0]);
            return -1;
        }
    }
    else
    {
        /* By default */
        use_backend = TCP;
    }

    if (use_backend == TCP)
    {
        ctx = modbus_new_tcp("192.168.2.133", 502);
        query = (uint8_t *)malloc(MODBUS_TCP_MAX_ADU_LENGTH);
    }
    else if (use_backend == TCP_PI)
    {
        ctx = modbus_new_tcp_pi("::0", "1502");
        query = (uint8_t *)malloc(MODBUS_TCP_MAX_ADU_LENGTH);
    }
    else
    {
        ctx = modbus_new_rtu("/dev/ttyUSB0", 115200, 'N', 8, 1);
        modbus_set_slave(ctx, SERVER_ID);
        query = (uint8_t *)malloc(MODBUS_RTU_MAX_ADU_LENGTH);
    }
    header_length = modbus_get_header_length(ctx);

    modbus_set_debug(ctx, TRUE);

    mb_mapping = modbus_mapping_new_start_address(
        UT_BITS_ADDRESS, UT_BITS_NB,
        UT_INPUT_BITS_ADDRESS, UT_INPUT_BITS_NB,
        UT_REGISTERS_ADDRESS, UT_REGISTERS_NB_MAX,
        UT_INPUT_REGISTERS_ADDRESS, UT_INPUT_REGISTERS_NB);
    if (mb_mapping == NULL)
    {
        fprintf(stderr, "Failed to allocate the mapping: %s\n",
                modbus_strerror(errno));
        modbus_free(ctx);
        return -1;
    }

    /* Examples from PI_MODBUS_300.pdf.
       Only the read-only input values are assigned. */

    /* Initialize input values that's can be only done server side. */
    modbus_set_bits_from_bytes(mb_mapping->tab_input_bits, 0, UT_INPUT_BITS_NB,
                               UT_INPUT_BITS_TAB);

    /* Initialize values of INPUT REGISTERS */
    for (i = 0; i < UT_INPUT_REGISTERS_NB; i++)
    {
        mb_mapping->tab_input_registers[i] = UT_INPUT_REGISTERS_TAB[i];
    }

    if (use_backend == TCP)
    {
        s = modbus_tcp_listen(ctx, 1);
        modbus_tcp_accept(ctx, &s);
    }
    else if (use_backend == TCP_PI)
    {
        s = modbus_tcp_pi_listen(ctx, 1);
        modbus_tcp_pi_accept(ctx, &s);
    }
    else
    {
        rc = modbus_connect(ctx);
        if (rc == -1)
        {
            fprintf(stderr, "Unable to connect %s\n", modbus_strerror(errno));
            modbus_free(ctx);
            return -1;
        }
    }
    UINT32 datalen = 1;
    UINT32 address = 0;
    for (;;)
    {
        memset(m_nb_registers, 0, 1 * sizeof(UINT16));
        rc = modbus_read_input_registers(ctx, address, datalen, m_nb_registers);
        if (rc < 0)
        {
            // LOG(ERROR) << "OdlxCarModbus::ReadRegToDataItem>>modbus read registers faild  Lret_timeout!!!!";
            return Lret_timeout;
        }
        sleep(1);
        UINT16 tmpvalue = m_nb_registers[0];
        LOG(INFO) << "tmpvalue == " << tmpvalue;
    }

    printf("Quit the loop: %s\n", modbus_strerror(errno));

    if (use_backend == TCP)
    {
        if (s != -1)
        {
            close(s);
        }
    }
    modbus_mapping_free(mb_mapping);
    free(query);
    /* For RTU */
    modbus_close(ctx);
    modbus_free(ctx);

    return 0;
}
